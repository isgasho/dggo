syntax = "proto3";

package xdrive;
option java_package = "com.vitessedata.xdrive";

enum SpqType {
    UNKNOWN  = 0;
    BOOL     = 0x0001;      /* protobuf type int32 */
    INT16    = 0x0002;      /* protobuf type int32 */
    INT32    = 0x0003;      /* protobuf type int32 */
    INT64    = 0x0004;      /* protobuf type int64 */
    INT128   = 0x0005;      /* protobuf type int64 x2 */ 
    FLOAT    = 0x0006;      /* protobuf type float */
    DOUBLE   = 0x0007;      /* protobuf type double */
    /* BYTEA    = 0x0008;   not supported. */
    CSTR     = 0x0009;      /* protobuf type string */
    DEC64    = 0x000A;      /* protobuf type int64 */
    DEC128   = 0x000B;      /* protobuf type int64 x2 */
	UUID     = 0x000C;		/* protobuf type int64 x2 */
	INTERVAL = 0x000D;		/* protobuf type int64 x2 */

	VARLENA	 = 0x000E;		/* postgres varlena type */

    /* INTERNAL = 0xFFFF; */

    DATE             = 0x010003;        /* protobuf type int32 */
    TIME_MILLIS      = 0x020003;        /* protobuf type int32 */
    TIMESTAMP_MILLIS = 0x030004;        /* protobuf type int64 */
    TIME_MICROS      = 0x040004;        /* protobuf type int64 */
    TIMESTAMP_MICROS = 0x050004;        /* protobuf type int64 */
    JSON             = 0x060009;        /* protobuf type string */
    NUMERIC          = 0x070009;        /* protobuf type string */
    TIMESTAMPTZ_MILLIS	= 0x080004;        /* protobuf type int64 */
    TIMESTAMPTZ_MICROS	= 0x090004;        /* protobuf type int64 */
	MACADDR				= 0x0A000E;		   /* macaddr, protobuf typ varlena */
	INET				= 0x0B000E;		   /* inet, protobuf typ varlena */

	ARRAY               = 0x10000000;      /* Array! */
}

message ColumnDesc {
    string     name = 1;
    int32      type = 2;       // use spq column type
}
   
message Filter {
    string op = 1;
    string column = 2;
    repeated string args = 3;
}

message CSVSpec {
    string  delimiter = 1;
    string  nullstr = 2;
    bool    header = 3;
    string  quote = 4;
    string  escape = 5;
}

message FileSpec {
    string   path    = 1;
    string   format  = 2;         // "csv", "spq", "par", ...
    CSVSpec  csvspec = 3;         // only applies to CSV format
}

message StringList {
    repeated string str = 1;
}

message KeyValue {
    string key = 1;
    string value = 2;
}

message KeyValueList {
    repeated KeyValue kv = 1;
}

message PathSpec {
    string path = 1;
}

message OpSpec {
    string op = 1;
}

message OpStatus {
    int32 errcode = 1;
    string errmsg = 2;
	int32 flag = 3;
}

/*
 * XCol and XRowSet 
 */
message XCol {
    string colname = 1;
    int32 nrow = 2;
    repeated bool nullmap = 3;
    repeated string sdata = 4;
    repeated int32 i32data = 5;
    repeated int64 i64data = 6;
    repeated float f32data = 7;
    repeated double f64data = 8;
	repeated bytes bindata = 9;
}

message XRowSet {
    int32 tag       = 1;
    int32 round     = 2;
    repeated XCol columns = 3;
}

message XMsg {
    enum XMsgFlag {
        EOS = 0;
        EOB = 1;
        CONTINUE = 2;
        SYNC = 1000;
                BSPSYNC = 1001;
                BSPDATA = 1002;
    }

    string name = 1;
    XMsgFlag xflag = 2;
    int32 code = 3;
    string info = 4;
    XRowSet rowset = 5;
}

/*
 * Read/Sample: Suppose we read two columns,
 * 
 * dg -> xdrive: OpSpec
 * xdrive -> dg: OpStatus
 * dg -> xdrive: ReadRequest/SampleRequest
 * xdrive -> dg: DataReply/XColDataReply col(page) 1
 * xdrive -> dg: DataReply/XColDataReply col(page) 2
 * xdrive -> dg: DataReply/XColDataReply col(page) 1
 * xdrive -> dg: DataReply/XColDataReply col(page) 2
 * ...
 * xdrive -> dg: DataReply/XColDataReply col(page) 1
 * xdrive -> dg: DataReply/XColDataReply col(page) 2
 * xdrive -> dg: DataReply/XColDataReply of 0-byte data.
 *
 * At anytime, client can send an DataReply/XColDataReply of error.
 */
message ReadRequest {
    // Which file(s)
    FileSpec   filespec = 1;

    // Table Schema
    repeated ColumnDesc columndesc = 2;

    // Names of required columns
    repeated string columnlist = 3;

    // Filters
    repeated Filter filter = 4;

    // Fragment
    int32    frag_id    = 5;
    int32    frag_cnt   = 6;

	// ts
	int64	ts = 7;

    // Query 
	bytes query = 8;
	int32 bloomsz = 9;
	bytes bloom = 10;
}

message SampleRequest {
    // Which file(s)
    FileSpec   filespec = 1;

    // Table Schema
    repeated ColumnDesc columndesc = 2;

    // Fragment
    int32    frag_id = 3;
    int32    frag_cnt = 4;

    // Sample size
    int32    nrow = 5;
}

message DataReply {
    int32  errcode = 1;
    string errmsg = 2;
    bytes  data = 3;
}

message XColDataReply {
	int32 errcode = 1;
	string errmsg = 2;
	XCol data = 3;
}

/*
 * SizeMeta 
 * 
 * dg -> xdrive: OpSpec
 * xdrive -> dg: OpStatus
 * dg -> xdrive: SizeMetaRequest 
 * xdrive -> dg: SizeMetaReply 
 */
message SizeMetaRequest {
    // Which file(s)
    FileSpec  filespec = 1;

    // Table Schema
    repeated ColumnDesc columndesc = 2;
    
    // Fragment
    int32    frag_id = 3;
    int32    frag_cnt = 4;
}
     
message SizeMetaReply {
    int32 errcode = 1;
    string errmsg = 2;
    int64 nrow = 3;
    int64 nbyte = 4;
}

/*
 * Write: Again, suppose we are writing two columns
 * 
 * dg -> xdrive: OpSpec
 * xdrive -> dg: OpStatus
 * dg -> xdrive: WriteRequest 
 * xdrive -> dg: WriteReply
 * dg -> xdrive: WriteData/XCol of page(col) 1
 * xdrive -> dg: WriteReply 
 * dg -> xdrive: WriteData/XCol of page(col) 2
 * xdrive -> dg: WriteReply 
 * ...
 * ...
 * dg -> xdrive: WriteData/XCol of page(col) 1
 * xdrive -> dg: WriteReply 
 * dg -> xdrive: WriteData/XCol of page(col) 2
 * xdrive -> dg: WriteReply 
 * dg -> xdrive: WriteData with 0 byte
 * xdrive -> dg: WriteReply
 *
 * If the final WriteReply has no error then the write succeeded.
 */
message WriteRequest { 
    FileSpec filespec = 1;
    repeated ColumnDesc columndesc = 2;
    int32    frag_id = 3;
    int32    frag_cnt = 4;

	int64	ts = 5;
}

message WriteData {
    bytes data = 1;
}

message WriteReply {
    int32 errcode = 1;
    string errmsg = 2;
}
